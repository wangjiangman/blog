---
layout:     post
title:      "敏捷开发修炼之道笔记"
subtitle:   "Practice of an agile developer note"
date:       2017-02-15
author:     "Fiona"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - 读书笔记
    - 程序员心法
---

> To be an agile developer


## Catagory

1. [About](#about)
2. [In-action](#in-action)

---

## About

- ### 敏捷开发定义

> 敏捷开发就是在一个高度协作的环境中，不断地使用反馈进行自我调整和完善。


1. **高度协作的环境**   
	开发者之间协作编码（方式有结对编程，使用版本管理工具等）; 开发者和客户用户之间保持协作，频繁地为用户展示系统
2. **反馈**   
	指的是，要开发者本身及时地对代码进行review，做好单元测试，或者邀请其他开发者对设计或者代码进行评审。调整和完善则指对代码进行完善，必要时对代码进行重构
3. **要以迭代的方式进行工作**   
	就要不断重复反馈和调整的过程

- ### 敏捷开发内功招数
<p>迭代开发，价值优先</p><p>分解任务，真实进度</p>
<p>站立会议，交流畅通</p><p>用户参与，调整方向</p>
<p>结对编程，代码质量</p><p>测试驱动，安全可靠</p>
<p>持续集成，尽早反馈</p><p>自动部署，一键安装</p>
<p>定期回顾，持续改进</p><p>不断学习，提高能力</p>

- ### 敏捷开发者宣言
<p>个体和交互胜过过程和工具</p>
<p>可工作的软件胜过面面俱到的文档</p>
<p>客户协作胜过合同谈判</p>
<p>响应变化胜过遵循计划</p>
<p>一种把以人为本、团队合作、快速响应变化和可工作的软件作为宗旨的开发方法。</p>


## In-action
> 敏捷开发的基础： 态度决定一切  学无止境
>
> 敏捷开发的目的是： 交互用户想要的软件
>
> 敏捷开发的实施： 敏捷反馈 敏捷编码 敏捷测试 敏捷协作

- ### 态度决定一切
敏捷开发着眼于人而非过程和工具。只有人才能产出软件，所以开发者的态度至关重要。    
专业的态度应该着眼于项目和团队的积极结果，关注个人和团队的成长，围绕最后的成功展开工作。    
遇到问题，优先解决问题，**1专注做事**，而非追究责任人。Blame doesn't fix bugs    
迫于时间压力，记住**2欲速则不达**，要理解开发过程，防微杜渐，进行代码评审和单元测试。维持代码的整洁和敞亮。    
方案评审时，**3对事不对人**。不谴责不批判，单一表达自己的观点，并尊重其他人表达观点的权利。态度积极，不要扼杀创新性的意见。一旦做出决定，坚决执行。    
当发现设计或者代码有问题时，**4要勇敢表达出来**，当别人不理解时，则用他们理解的方式去表达。最后别人仍然不赞同，反思一下自己。    
- ### 学无止境

1. **5跟踪变化**, 软件开发行业，瞬息万变，我们要时刻跟踪变化。不需要精通所有技术（项目相关的精通即可），但要知道行业动向。	
如何跟踪行业动态：	
* 迭代和增量式学习：记下想了解的知识，每天花一定的时间深入研究。  
* 多逛社区，了解知名博主们都在学习什么  
* 参加用户组活动和研讨会  
* 如饥似渴地阅读  

跟踪最新技术时，要合理安排学习时间和重点，明白新技术适用在什么地方，可以解决什么问题。

2. **6对团队投资**，知识在分享时可以产生新的火花，要善于在团队中分享和促成其他成员形成分享的习惯

3. **7懂得丢弃**过时的工作方式和工作习惯

4. 不能局限在别人告诉你问题的原因，要**8打破砂锅问到底**，直到了解问题的根源。

5. **9把握开发的节奏**。时间本身是一个非常重要的反馈。将时间分为一个个的时间盒，一个时间盒内完成一个迭代。保持规律的开发节奏，不要让事情变得一团糟，减少不必要的加班。


- ### 交互用户想要的软件

时间在往前走，需求会随时间而变化，我们的敌人是变化，为了满足客户的需求，业务方面我们要让客户做决定；设计是开发的蓝图，但是也不能受其牵制，让设计指导而不是操纵开发；开发人员需要在项目中引入合适的技术，并且要合理使用技术。为了跟随客户需求的变化，需要提早集成频繁集成，不想破坏已有的代码，想让代码一直保持可以发布。为了便于多次向用户展示新功能，需要提早实现自动化部署。代码可用且易于向用户部署，就能使用演示火的频繁反馈。可以使用短迭代增量发布来帮助经常发布新功能。  

与用户签订合同时，固定的价格不利于使用敏捷的方法使客户与我们站在同一条船上。固定的价格意味着背叛承诺。

1. **10让客户做决定**   
开发者不应该做业务发面的决定，用业务负责人理解的语言告诉他们遇到的问题，让他们做决定。

2. **11让设计指导而不是操纵开发**   
计划本身是没有意义的，但计划的过程必不可少。好的设计师正确的而不是精确的，是目标而不是处方。

3. **12合理使用技术**   
不要为了学习新技术而采用新技术，选择合适的技术才是明智之举。新技术应该是工具，帮助我们工作，而不是为之工作。
如何选择一个合适的开发框架：
a、这个技术框架能解决这个问题吗？
b、你将会被他拴住吗？
c、维护成本是多少？

4. **13保持可发布**    
任何时候只要你没有准备好，就是敌人攻击你的最佳时刻。保持系统随时可编译、运行、测试和立即部署
防止提交破坏系统的代码的工作流程：
a、本地进行调试
b、检出代码
c、提交代码

5. **14提早集成频繁集成**   
集成是风险的主要来源，要想规避这个风险，只能提早集成，持续而哟规律地集成

6. **15提早实现自动化部署**    
可以及早发现一些环境不兼容等问题

7. **16使用演示获得频繁的反馈**    
项目开发的时候，应用应该是可见的，定期为客户演示最新功能，防止产生重大需求理解偏差

8. **17使用短迭代增量发布**     
大项目最好的办法是小步前进，大步跳跃增加了风险，小步前进才能把握平衡。迭代让人感觉非常专注且具效率，你能看到一个世纪并且确切的目标，最终期限迫使你做出一些艰难的决策，没有遗留下长期悬而未决的问题。
敏捷开发的周期应该如图所示：  
![java-javascript](/blog/img/in-post/post-agile-develop/develop-circle.png)

9. **18固定的价格就意味着背叛承诺**     
软件开发过程变化无常，所以我们采用迭代和增量开发方式。固定一个价格是无视变化的表现，我们要对软件开发工作作出真实的评估。

- ### 敏捷反馈
>反馈的来源不仅仅是客户	

1. **19守护天使** 代码本身的反馈，使用监测程序或工具来进行单元测试。	
2. 但单元测试也不能保证API和接口的笨重和难用，所以要**20先用它再实现它**，也就事使用TDD（测试驱动开发）技术。TDD会让设计更简单有效。	
3. 程序在不同机器上运行，得到的反馈。**21不同的环境，有不同的问题**。	
4. 验收程序时也可以得到反馈，所以我们可以使用**22自动验收测试**	
5. **23能度量真实的进度**
	* 几乎所有公司的时间表都是为会计准备的，不是用来度量软件开发进度的。时间表很难反应软件开发的真实情况；	
	* 同样也不应该用一个百分比来衡量工作情况，而应该测定还要多少工作量没有完成	
	* 时刻让下一步工作可见有助于进度度量，最好的做法是使用待办事项backlog	
	* 不要用不恰当的度量来欺骗自己和团队，要评估那些需要解决的待办事项	
6. 产品发布之后，仍然要**24再次倾听用户的声音**	

- ### 敏捷编码
>任何一个笨蛋都能够让事情变得越来越笨重、越来越复杂、越来越极端。需要天才的指点以及许多的勇气，才能让事情向相反的方向发展。
><p style="float:right;">John Dryden</p>
1. **25代码要清晰地表达意图**   
编写清晰的而不是讨巧的代码，向代码读者明确表明意图

2. **26用代码沟通**   
用心选择有意义的命名，注释仅仅用来描述代码的意图和约束。不要用注释包裹代码。

3. **27动态评估取舍**   
考虑性能、便利性、生产力、成本和上市时间。如果性能足够，就将注意力放在其他方面。记住过犹不及。

4. **28增量式编程**   
增量式编程倾向于创建更小的方法和更具内聚性的类，可以采用测试优先开发方法，作为强制进行增量式编程的方式。关键在于持续做一些细小而有用的事情，而不是做一段长时间的编程或重构。

5. **29保持简单**   
开发可以工作的，最简单的解决方案。除非不可辩驳的原因，否则不要使用模式、原则和高难度技术之类的东西。

6. **30编写内聚的代码**   
让类的功能尽量集中，让组件尽量小。每个类或组件只做一件事。

7. **31告知不要询问**   
不要抢别的对象或者组件的工作，告诉它做什么，让后盯住自己的工作。

8. **32根据契约进行替换**   
针对is-a关系使用继承；针对has-a或uses-a关系使用委托。通过替换遵循接口契约的类，来添加并改进功能特性，要多使用委托而不是继承。

- ### 敏捷测试
>你也许会对木匠那毫无差错的工作印象深刻。但我向你保证，事实不是这样的。真正的高手只是知道如何亡羊补牢。    
	> <p style="float:right;">——Jeff Miller，家具制造者、作家</p>

1. **33记录问题解决日志**   
维护一个问题及其解决方案的日志。这本身是修复问题的一部分。	
可以记录一下几点：	
 * 问题发生的时间
 * 问题简述
 * 解决方案详细描述
 * 引用文章或者网址
 * 相关代码片段或者对话框的截屏
2. **34警告即为错误**   
迁入的代码不应该有任何警告
3. **35对问题各个击破**   
解决问题时，要将问题域与周边环境隔离开来。
4. **36报告所有的异常**   
处理或者向上传播所有的异常。不要将异常压制不管，临时这样做也不行。
5. **37提供有用的错误信息**   
错误信息为解决问题提供线索。当问题发生时，可以详细研究问题的细节描述和发生的上下文。

- ### 敏捷协作
> 我不仅发挥了自己的全部能力，还将我所仰仗的人的能力发挥到极致。

1. **38定期安排会面时间**   
了解各自的进度和手头上的工作，而且把各自遇到的问题拿出来讨论。
2. **39架构师必须写代码**   
优秀的设计从积极的程序员那里开始演化。积极的编程可以带来深入的理解。不愿意编程的架构师，不知道系统的真实情况，是无法展开设计的。
3. **40实行代码集体所有制**   
让每个人都能修改整个系统的问题而又不至于胡作非为。
4. **41成为指导者**   
分享自己擅长的领域，指导别人也是在增长自己的学识，同时提升了整个团队的实力。
5. **42允许大家自己想办法**   
给别人解决问题的机会。指给他们正确的方向。而不是直接提供解决方案。
6. **43准备好后再共享代码**   
无论在何种状况下都不允许提交未完成的代码或者没有进行单元测试或者自测试的代码。
7. **44进行代码复查**   
代码复查对于提升代码质量和降低错误率来说是无价之宝。
8. **45及时通报进展及问题**   
发布进展状况，新的想法和目前正在关注的主题，不要等着别人来问项目状态如何。


